id: https://w3id.org/linkml/transformer
name: linkml-map
title: LinkML Map Data Model
description: |-
  Datamodel for LinkML schema mappings and transformations.
  
  A mapper generates instances of a *target* data model from
  instances of a *source* data model. This transformation process
  is guided by a *TransformationSpecification*.
  
  The specification is independent of any one method for transforming
  data. It allows different approaches, including:
  
  - direct implementation, transforming python or json objects
  - translation of the specification into SQL commands, to operate on relations
  - translation of the specification into SPARQL CONSTRUCTs, to operate on triples
  - translation into another specification language, such as R2RML
prefixes:
  linkml: https://w3id.org/linkml/
  linkmlmap: https://w3id.org/linkml/transformer/
  dcterms: http://purl.org/dc/terms/
  schema: http://schema.org/
  rdfs: http://www.w3.org/2000/01/rdf-schema#
  sh: http://www.w3.org/ns/shacl#
  STATO: http://purl.obolibrary.org/obo/STATO_
default_prefix: linkmlmap

imports:
  - linkml:types

types:

  ClassReference:
    typeof: string

  SlotReference:
    typeof: string

  EnumReference:
    typeof: string

classes:

  Any:
    class_uri: linkml:Any

  SpecificationComponent:
    abstract: true
    attributes:
      description:
        description: description of the specification component
        slot_uri: dcterms:description
      implements:
        description: A reference to a specification that this component implements.
        multivalued: true
        range: uriorcurie
      comments:
        description: >-
          A list of comments about this component. Comments are free text, and may be
          used to provide additional information about the component, including
          instructions for its use.
        multivalued: true
        range: string
        slot_uri: rdfs:comment

  TransformationSpecification:
    is_a: SpecificationComponent
    description: A collection of mappings between source and target classes
    tree_root: true
    attributes:
      id:
        # identifier: true
        description: Unique identifier for this transformation specification
        slot_uri: schema:identifier
      title:
        description: human readable title for this transformation specification
        slot_uri: dcterms:title
      prefixes:
        description: maps prefixes to URL expansions
        range: KeyVal
        multivalued: true
        inlined: true
        slot_uri: sh:declare
      copy_directives:
        range: CopyDirective
        multivalued: true
        inlined: true
      source_schema:
        description: name of the schema that describes the source (input) objects
      target_schema:
        description: name of the schema that describes the target (output) objects
      class_derivations:
        description: >-
          Instructions on how to derive a set of classes in the target schema
          from classes in the source schema.
        range: ClassDerivation
        multivalued: true
        inlined: true
      enum_derivations:
        description: >-
          Instructions on how to derive a set of enums in the target schema
        range: EnumDerivation
        multivalued: true
        inlined: true
      slot_derivations:
        description: >-
          Instructions on how to derive a set of top level slots in the target schema
        range: SlotDerivation
        multivalued: true
        inlined: true

  ElementDerivation:
    is_a: SpecificationComponent
    abstract: true
    description: >-
      An abstract grouping for classes that provide a specification of how to 
      derive a target element from a source element.
    attributes:
      name:
        key: true
        description: Name of the element in the target schema
      copy_directives:
        range: CopyDirective
        multivalued: true
        inlined: true
      overrides:
        description: overrides source schema slots
        range: Any
        #multivalued: true
        #inlined: true
      is_a:
        range: ElementDerivation
        slot_uri: linkml:is_a
      mixins:
        range: ElementDerivation
        multivalued: true
        inlined: false
        slot_uri: linkml:mixins
      value_mappings:
        range: KeyVal
        multivalued: true
        inlined: true
        description: >-
          A mapping table that is applied directly to mappings, in order of precedence
      expression_to_value_mappings:
        range: KeyVal
        multivalued: true
        inlined: true
        description: >-
          A mapping table in which the keys are expressions
      expression_to_expression_mappings:
        range: KeyVal
        multivalued: true
        inlined: true
        description: >-
          A mapping table in which the keys and values are expressions
      mirror_source:
        range: boolean


  ClassDerivation:
    is_a: ElementDerivation
    description: >-
      A specification of how to derive a target class from a source class.
    attributes:
      #name:
      #  key: true
      #  description: Name of the class in the target schema
      populated_from:
        range: ClassReference
        description: Name of the class in the source schema
      sources:
        range: ClassReference
        multivalued: true
      joins:
        range: AliasedClass
        multivalued: true
        inlined: true
        description: Additional classes to be joined to derive instances of the target class
        comments:
          - not yet implemented
      slot_derivations:
        range: SlotDerivation
        multivalued: true
        inlined: true
      target_definition:
        range: Any
        description: >-
          LinkML class definition object for this slot.
        comments:
          - currently defined as Any to avoid coupling with metamodel

  AliasedClass:
    description: alias-class key value pairs for classes
    attributes:
      alias:
        key: true
        description: name of the class to be aliased
      class_named:
        description: local alias for the class

  SlotDerivation:
    is_a: ElementDerivation
    description: A specification of how to derive the value of a target slot from a source slot
    attributes:
      name:
        key: true
        description: Target slot name
      populated_from:
        range: SlotReference
        description: Source slot name
      sources:
        range: SlotReference
        multivalued: true
      object_derivations:
        description: >-
          One or more object derivations used to construct the slot value(s), 
          which must be instances of a class.
        range: ObjectDerivation
        multivalued: true
        inlined: true
      derived_from:
        range: SlotReference
        multivalued: true
        description: Source slots that are used to derive this slot. This can be computed from the expr,
          if the expr is declarative.
      expr:
        range: string
        description: >-
          An expression to be evaluated on the source object to derive the target slot.
          Should be specified using the LinkML expression language.
      range:
        slot_uri: linkml:range
        range: string
      unit_conversion:
        range: UnitConversionConfiguration
      inverse_of:
        range: Inverse
        description: >-
          Used to specify a class-slot tuple that is the inverse of the derived/target slot.
          This is used primarily for mapping to relational databases or formalisms that do
          not allow multiple values. The class representing the repeated element has a foreign
          key slot inserted in that 'back references' the original multivalued slot.
      hide:
        range: boolean
        description: True if this is suppressed
      type_designator:
        range: boolean
      target_definition:
        range: Any
        description: >-
          LinkML definition object for this slot.
        comments:
          - currently defined as Any to avoid coupling with metamodel
      cast_collection_as:
        range: CollectionType
      dictionary_key:
        range: string
      stringification:
        range: StringificationConfiguration
      aggregation_operation:
        range: AggregationOperation

  EnumDerivation:
    is_a: ElementDerivation
    description: A specification of how to derive the value of a target enum from a source enum
    attributes:
      name:
        key: true
        description: Target enum name
      populated_from:
        range: EnumReference
        description: Source enum name
      sources:
        range: EnumReference
        multivalued: true
      expr:
        range: string
        description: >-
          An expression to be evaluated on the source object to derive the target slot.
          Should be specified using the LinkML expression language.
      hide:
        range: boolean
        description: True if this is suppressed
      permissible_value_derivations:
        description: Instructions on how to derive a set of PVs in the target schema
        range: PermissibleValueDerivation
        multivalued: true
        inlined: true

  PermissibleValueDerivation:
    is_a: ElementDerivation
    description: A specification of how to derive the value of a PV from a source enum
    todos:
      - this is currently under-specified. We will need boolean combinators to express if-then-else
    attributes:
      name:
        key: true
        description: Target permissible value text
      expr:
        range: string
      populated_from:
        range: string
        description: Source permissible value
      sources:
        range: string
        multivalued: true
      hide:
        range: boolean

  PrefixDerivation:
    is_a: ElementDerivation

  UnitConversionConfiguration:
    attributes:
      target_unit:
      target_unit_scheme:
        range: string
        examples:
          - value: ucum
      source_unit:
      source_unit_scheme:
          range: string
          examples:
          - value: ucum
      source_unit_slot:
      source_magnitude_slot:
      target_unit_slot:
      target_magnitude_slot:

  StringificationConfiguration:
    attributes:
      delimiter:
        range: string
        examples:
          - value: ','
          - value: '|'
          - value: ';'
      reversed:
        range: boolean
      over_slots:
        range: string
        multivalued: true
      syntax:
        range: SerializationSyntaxType
        examples:
          - value: 'json'
          - value: 'yaml'

  Inverse:
    description: Used for back references in mapping to relational model
    aliases:
      - backref
      - back_references
    attributes:
      slot_name:
      class_name:

  TransformationOperation:
    abstract: true

  AggregationOperation:
    is_a: TransformationOperation
    attributes:
      operator:
        range: AggregationType
        required: true
      null_handling:
        range: InvalidValueHandlingStrategy
      invalid_value_handling:
        range: InvalidValueHandlingStrategy

  GroupingOperation:
    is_a: TransformationOperation
    attributes:
      null_handling:
        range: InvalidValueHandlingStrategy

  PivotOperation:
    aliases:
      - melt/unmelt
      - reification/dereification
    is_a: TransformationOperation
    attributes:
      direction:
        range: PivotDirectionType
        required: true
      variable_slot:
        aliases:
          - var_name
        range: SlotReference
        ifabsent: string(variable)
        description: Slot to use for the variable column in the melted/long representation.
          In EAV this is the name of the 'A' variable
      value_slot:
        aliases:
          - value_name
        range: SlotReference
        ifabsent: string(value)
        description: Slot to use for the value column in the melted/long representation.
          In EAV this is the name of the 'V' variable
      unmelt_to_class:
        description: In an unmelt operation, attributes (which are values in the long/melted/EAV
          representation) must conform to valid attributes in this class
        range: ClassReference
      unmelt_to_slots:
        range: SlotReference
        multivalued: true

  KeyVal:
    attributes:
      key:
        key: true
      value:
        range: Any

  CopyDirective:
    description: >-
      Instructs a Schema Mapper in how to map to a target schema. Not used for data transformation.

      This is the process to process a directive:
      1. If `copy_all`, add all sub-elements to the list of sub-elements to be copied.
      2. If `exclude`, remove the specified sub-elements from the above list.
      3. If `exclude_all`, clean-up the above list. Effectively making previous steps useless.
      4. If `include`, add the specified sub-elements from the list result of previous steps.

      Implementations might decide to somehow report (error, warning,...) meaningless combinations (like specifying `copy_all` and `exclude_all`). 

      Validation on the correctness of the resulting derived schema might be done optionally by the implementation.
      For example, removing a slot but keeping a class that requires it would invalidate the derived-schema.
      It is always possible to validate the schema with the LinkML linter after derivation.

      What are the considered sub-elements depends on the calls of Element to be transformed.
      For example, for a class they are `slots` and `attributes`.
    status: testing
    attributes:
      element_name:
        key: true
      copy_all:
        range: boolean
        description: Copy all sub-elements of the Element being derived.
      exclude_all:
        range: boolean
        description: Do not copy any of the sub-elements of the Element being derived.
      exclude:
        range: Any
        description: >-
          Remove certain sub-elements from the list of sub-elements to be copied.

          As of now there it is under-specified, how to specify the sub-elements to exclude.
          One possible implementation would be a list where all element types can be mixed, since there might not be name conflicts across element types.
      include:
        range: Any
        description: >-
          Add certain sub-elements to the list of sub-elements to be copied.

          As of now there it is under-specified, how to specify the sub-elements to include.
          One possible implementation would be a list where all element types can be mixed, since there might not be name conflicts across element types.
      add:
        range: Any

enums:
  CollectionType:
    permissible_values:
      SingleValued:
      MultiValued:
      MultiValuedList:
      MultiValuedDict:
  SerializationSyntaxType:
    permissible_values:
      JSON:
      YAML:
      TURTLE:
  AggregationType:
    permissible_values:
      SUM:
      AVERAGE:
        aliases:
          - mean
          - avg
        exact_mappings:
          - STATO:0000230
      COUNT:
        exact_mappings:
          - STATO:0000047
      MIN:
      MAX:
      STD_DEV:
        exact_mappings:
          - STATO:0000237
      VARIANCE:
      MEDIAN:
        exact_mappings:
          - STATO:0000674
      MODE:
        exact_mappings:
          - STATO:0000033
      CUSTOM:
      SET:
      LIST:
      ARRAY:
  InvalidValueHandlingStrategy:
    permissible_values:
      IGNORE:
      TREAT_AS_ZERO:
      ERROR_OUT:
  PivotDirectionType:
    permissible_values:
      MELT:
        aliases:
          - unpivot
          - wide to long
      UNMELT:
        aliases:
          - pivot
          - long to wide
