[project]
name = "linkml-map"
description = "a framework for specifying and executing mappings between data models"
readme = "README.md"
authors = [
    {name = "cmungall", email = "cjm@berkeleybop.org"},
]
requires-python = "<=3.13,>=3.9"
dynamic = [ "version" ]

dependencies = [
    "asteval<1,>=0",
    "click<9,>=8",
    "curies",
    "duckdb<1,>=0",
    "graphviz<1.0.0,>=0.20.3",
    "jinja2<4,>=3",
    "lark<2,>=1",
    "linkml-runtime>=1.9.1",
    "pint<1,>=0",
    "pydantic>=2.11.3",
    "pyyaml",
    "ucumvert<1,>=0",
]

[dependency-groups]
dev = [
    "deepdiff<7.0.0,>=6.7.1",
    "deptry<1.0.0,>=0.23.0",
    "jupyter<2.0.0,>=1.1.1",
    "linkml>=1.8.7",
    "mkdocs-mermaid2-plugin<1.0.0,>=0.6.0",
    "mkdocs-windmill",
    "mkdocstrings[crystal,python]",
    "mknotebooks<1.0.0,>=0.8.0",
    "pytest>=8.3.5",
    "ruff>=0.11.5",
    "tox>=4.25.0",
]

[project.scripts]
linkml-map = "linkml_map.cli.cli:main"

[tool.deptry]
known_first_party = ["linkml_map"]
extend_exclude = ["docs"]

# See https://hatch.pypa.io/latest/config/build/#file-selection for how to
# explicitly include files other than default into the build distributions.
[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

# Ref.: https://github.com/ninoseki/uv-dynamic-versioning/
[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
fallback-version = "0.0.0"


# Ref: https://github.com/codespell-project/codespell#using-a-config-file
[tool.codespell]
skip = '.git,*.pdf,*.svg,go.sum,*.lock'
check-hidden = true
ignore-regex = '(^\s*"image/\S+": ".*|\b(KEGG.BRITE|mor.nlm.nih.gov)\b)'
ignore-words-list = 'infarction,amination,assertIn,brite,ehr,mor,brite,nin,mirgate'

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.format]
exclude = [
  "docs/",
  "src/linkml_map/datamodel",
  "tests/input"
]

[tool.ruff.lint]
exclude = [
  "docs/",
  "src/linkml_map/datamodel",
  "tests/input"
]

select = [
    # core
    "F", # Pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "C90", # mccabe +
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    # extensions
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    # "COM", # flake8-commas
    # "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    # "DJ", # flake8-django
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    # "PTH", # flake8-use-pathlib
    # "TD", # flake8-todos
    # "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "AIR", # Airflow
    "PERF", # Perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

ignore = [
    # UP007: non-pep604-annotation-union - fix when 3.9 is dropped
    "UP007",
    # D200: unnecessary-multiline-docstring
    "D200",
    # D203: one-blank-line-before-class (conflicts with D211)
    "D203",
    # D212: multi-line-summary-first-line (conflicts with D213)
    "D212",
    # E203: whitespace before ',', ';', or ':'
    "E203",
    # E501: line length (specified elsewhere)
    "E501",
    # ISC001: conflicts with Ruff's formatter
    "ISC001",
    # C901: complex-structure - needs code change
    "C901",
    # E731: lambda-assignment - needs code change
    "E731",
    # B024: abstract-base-class-without-abstract-method
    "B024",
    # T201: print
    "T201"
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"] # use of assert

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 15.
max-complexity = 15
